// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin outline($color) {
  border: 1px solid $color;
  background-color: $white;
  color: $color;
  a {
    color: $color;
  }
}

@mixin outline-hover($color) {
  &:hover,
  &:focus {
    background-color: $color;
    color: $white;
    a {
      color: $white;
    }
  }
}

@mixin outline-link($color) {
  @include outline($color);
  @include outline-hover($color);
}

@mixin solid-hover($color) {
  &:hover,
  &:focus {
    background-color: $color;
    color: $white;
    a {
      color: $white;
    }
  }
}

@mixin breakpoint($screen: $md-screen) {
  @media screen and (min-width: $screen) { @content; }
}


// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
  font-size: ($sizeValue * 16) * 1px;
  font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Clearfix
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
  clear: both;
}

/**
 * Lists
 */
@mixin no-bullets() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin inline-list() {
  @include no-bullets();
  li {
   display: inline-block; 
 }
}


/// Responsive manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);
  
  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}
